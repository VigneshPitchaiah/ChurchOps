const ChurchOps = {
    debounce: (func, wait = 300) => { let timeout; return function executedFunction(...args) { const later = () => { clearTimeout(timeout); func(...args); }; clearTimeout(timeout); timeout = setTimeout(later, wait); }; }, formatDate: (dateString) => { if (!dateString) return ''; const date = new Date(dateString); return date.toLocaleDateString(); }, formatTime: (timeString) => {
        if (!timeString) return ''; if (timeString.includes(':')) { const [hours, minutes] = timeString.split(':'); const date = new Date(); date.setHours(hours); date.setMinutes(minutes); return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }); }
        return timeString;
    }, toggleElement: (element, show = null) => { if (!element) return; if (show === null) { element.classList.toggle('hidden'); } else if (show) { element.classList.remove('hidden'); } else { element.classList.add('hidden'); } }, animateElement: (element, animation, duration = 300) => { if (!element) return Promise.reject('No element provided'); return new Promise(resolve => { element.classList.add(animation); const animationEndHandler = () => { element.classList.remove(animation); element.removeEventListener('animationend', animationEndHandler); resolve(); }; element.addEventListener('animationend', animationEndHandler); setTimeout(() => { if (element.classList.contains(animation)) { element.classList.remove(animation); resolve(); } }, duration + 50); }); }, apiRequest: async (url, options = {}) => {
        try {
            const response = await fetch(url, { headers: { 'Content-Type': 'application/json', 'X-Requested-With': 'XMLHttpRequest' }, ...options }); if (!response.ok) { throw new Error(`API Error:${response.status}${response.statusText}`); }
            return await response.json();
        } catch (error) { console.error('API Request Error:', error); throw error; }
    }, initComponents: () => { ChurchOps.initMobileMenu(); ChurchOps.initAttendanceForm(); ChurchOps.initSearchPeople(); ChurchOps.initHierarchyToggle(); ChurchOps.initFilterForm(); ChurchOps.initReportCharts(); ChurchOps.initResponsiveSliders(); }, initMobileMenu: () => {
        const hamburger = document.getElementById('sidebar-toggle'); const sidebar = document.getElementById('sidebar'); const appContainer = document.querySelector('.app-container'); if (!hamburger || !sidebar || !appContainer) { console.error('Mobile menu elements not found:', { hamburger: !!hamburger, sidebar: !!sidebar, appContainer: !!appContainer }); return; }
        hamburger.addEventListener('click', function (event) {
            console.log('Hamburger clicked'); if (window.innerWidth < 992) { appContainer.classList.toggle('sidebar-open'); void sidebar.offsetWidth; } else { appContainer.classList.toggle('sidebar-collapsed'); void sidebar.offsetWidth; }
            if (appContainer.classList.contains('sidebar-open')) { localStorage.setItem('sidebar-state', 'open'); } else if (appContainer.classList.contains('sidebar-collapsed')) { localStorage.setItem('sidebar-state', 'collapsed'); } else { localStorage.setItem('sidebar-state', 'default'); }
            event.preventDefault(); event.stopPropagation();
        }); const navLinks = document.querySelectorAll('.sidebar .nav-link'); navLinks.forEach(link => { link.addEventListener('click', () => { if (window.innerWidth < 992 && appContainer.classList.contains('sidebar-open')) { appContainer.classList.remove('sidebar-open'); localStorage.setItem('sidebar-state', 'default'); } }); }); document.addEventListener('click', function (event) { if (window.innerWidth < 992 && appContainer.classList.contains('sidebar-open') && !sidebar.contains(event.target) && !hamburger.contains(event.target)) { appContainer.classList.remove('sidebar-open'); localStorage.setItem('sidebar-state', 'default'); } }); if (window.innerWidth < 992) { appContainer.classList.remove('sidebar-open'); if (localStorage.getItem('sidebar-state') === 'open') { localStorage.setItem('sidebar-state', 'default'); } } else { const sidebarState = localStorage.getItem('sidebar-state'); if (sidebarState === 'collapsed') { appContainer.classList.add('sidebar-collapsed'); } else { appContainer.classList.remove('sidebar-collapsed'); } }
        window.addEventListener('resize', ChurchOps.debounce(() => { if (window.innerWidth >= 992) { appContainer.classList.remove('sidebar-open'); if (localStorage.getItem('sidebar-state') === 'collapsed') { appContainer.classList.add('sidebar-collapsed'); } } else { appContainer.classList.remove('sidebar-collapsed'); } }, 100));
    }, initAttendanceForm: () => {
        const form = document.getElementById('attendance-form'); if (!form) return; form.addEventListener('submit', async (e) => {
            e.preventDefault(); const submitButton = form.querySelector('button[type="submit"]'); const originalText = submitButton.textContent; submitButton.disabled = true; submitButton.innerHTML = '<span class="spinner"></span> Saving...'; try {
                const formData = new FormData(form); const response = await fetch(form.action, { method: 'POST', body: formData, headers: { 'X-Requested-With': 'XMLHttpRequest' } }); if (!response.ok) { throw new Error('Form submission failed'); }
                const successMessage = document.createElement('div'); successMessage.className = 'alert alert-success fade-in'; successMessage.innerHTML = `<div class="alert-content">Attendance saved successfully!</div><button class="alert-close"aria-label="Close">&times;</button>`; const flashContainer = document.querySelector('.flash-messages'); if (flashContainer) { flashContainer.appendChild(successMessage); successMessage.scrollIntoView({ behavior: 'smooth', block: 'start' }); const closeButton = successMessage.querySelector('.alert-close'); closeButton.addEventListener('click', () => { successMessage.classList.add('fade-out'); setTimeout(() => successMessage.remove(), 300); }); setTimeout(() => { successMessage.classList.add('fade-out'); setTimeout(() => successMessage.remove(), 300); }, 5000); }
                const personIds = formData.getAll('person_ids'); personIds.forEach(id => { const checkbox = document.querySelector(`input[name="person_ids"][value="${id}"]`); if (checkbox) { const row = checkbox.closest('tr, .person-item'); if (row) { row.classList.add('marked'); } } });
            } catch (error) { console.error('Form submission error:', error); const errorMessage = document.createElement('div'); errorMessage.className = 'alert alert-danger fade-in'; errorMessage.innerHTML = `<div class="alert-content">Failed to save attendance.Please try again.</div><button class="alert-close"aria-label="Close">&times;</button>`; const flashContainer = document.querySelector('.flash-messages'); if (flashContainer) { flashContainer.appendChild(errorMessage); const closeButton = errorMessage.querySelector('.alert-close'); closeButton.addEventListener('click', () => { errorMessage.classList.add('fade-out'); setTimeout(() => errorMessage.remove(), 300); }); } } finally { submitButton.disabled = false; submitButton.textContent = originalText; }
        }); const selectAllCheckboxes = document.querySelectorAll('.select-all'); selectAllCheckboxes.forEach(checkbox => { checkbox.addEventListener('change', () => { const container = checkbox.closest('.cell-content, .team-content, .department-content'); if (container) { const childCheckboxes = container.querySelectorAll('input[name="person_ids"]'); childCheckboxes.forEach(childCheckbox => { childCheckbox.checked = checkbox.checked; }); } }); });
    }, initSearchPeople: () => {
        const searchInput = document.getElementById('search-people'); if (!searchInput) return; const resultsContainer = document.getElementById('search-results'); const serviceId = searchInput.dataset.serviceId; const performSearch = ChurchOps.debounce(async (query) => {
            if (!query || query.length < 2) { resultsContainer.innerHTML = ''; return; }
            try {
                const url = `/api/people/search?query=${encodeURIComponent(query)}&service_id=${serviceId}`; const results = await ChurchOps.apiRequest(url); if (results.length === 0) { resultsContainer.innerHTML = '<div class="search-empty">No results found</div>'; return; }
                let html = '<ul class="search-results-list">'; results.forEach(person => { const markedClass = person.marked ? 'marked' : ''; html += `<li class="search-result-item ${markedClass}"><div class="search-result-info"><div class="search-result-name">${person.name}</div><div class="search-result-path">${person.region}&raquo;${person.direction}&raquo;${person.department}&raquo;${person.team}&raquo;${person.cell}</div></div><div class="search-result-action"><label class="form-check"><input type="checkbox"name="person_ids"value="${person.id}"class="form-check-input"${person.marked ? 'checked' : ''}><span class="form-check-label">Mark</span></label></div></li>`; }); html += '</ul>'; resultsContainer.innerHTML = html; const checkboxes = resultsContainer.querySelectorAll('input[name="person_ids"]'); checkboxes.forEach(checkbox => { checkbox.addEventListener('change', function () { const item = this.closest('.search-result-item'); if (this.checked) { item.classList.add('marked'); } else { item.classList.remove('marked'); } }); });
            } catch (error) { console.error('Search error:', error); resultsContainer.innerHTML = '<div class="search-error">Error searching for people</div>'; }
        }, 300); searchInput.addEventListener('input', () => { performSearch(searchInput.value.trim()); }); document.addEventListener('click', (event) => { if (!searchInput.contains(event.target) && !resultsContainer.contains(event.target)) { resultsContainer.innerHTML = ''; } });
    }, initHierarchyToggle: () => { document.querySelectorAll('.hierarchy-toggle').forEach(toggle => { toggle.addEventListener('click', (e) => { e.preventDefault(); const target = toggle.dataset.target; const content = document.getElementById(target); if (content) { content.classList.toggle('collapsed'); toggle.classList.toggle('collapsed'); const expanded = !content.classList.contains('collapsed'); toggle.setAttribute('aria-expanded', expanded); content.setAttribute('aria-hidden', !expanded); const icon = toggle.querySelector('.toggle-icon'); if (icon) { icon.textContent = expanded ? '−' : '+'; } } }); }); }, initFilterForm: () => {
        const filterForm = document.getElementById('filter-form') || document.getElementById('attendance-filter-form'); if (!filterForm || filterForm.classList.contains('no-ajax')) return; const regionSelect = document.getElementById('region_id'); const directionSelect = document.getElementById('direction_id'); const departmentSelect = document.getElementById('department_id'); const teamSelect = document.getElementById('team_id'); const cellSelect = document.getElementById('cell_id'); const nameSearch = document.getElementById('name_search'); const statusSelect = document.getElementById('is_active'); filterForm.addEventListener('submit', function (e) { e.preventDefault(); loadFilteredData(); }); const loadFilteredData = async function () {
            const tableBody = document.querySelector('#results-table-body'); if (!tableBody) { console.error('Could not find table body element #results-table-body'); return; }
            tableBody.innerHTML = '<tr><td colspan="10" class="text-center">Loading...</td></tr>';            const formData = new FormData(filterForm); const queryParams = new URLSearchParams(formData).toString(); try {
                const response = await fetch(filterForm.action + '?' + queryParams, { 
                    headers: { 
                        'X-Requested-With': 'XMLHttpRequest', 
                        'Accept': 'application/json' 
                    } 
                }); 
                if (!response.ok) { 
                    throw new Error(`Network response error: ${response.status} ${response.statusText}`); 
                }
                const contentType = response.headers.get('content-type'); 
                if (!contentType || !contentType.includes('application/json')) { 
                    throw new Error(`Invalid response type: ${contentType}. Expected application/json`); 
                }
                const data = await response.json(); if (!data || !data.results) { tableBody.innerHTML = '<tr><td colspan="10" class="text-center">No results found matching the current filters.</td></tr>'; return; }
                tableBody.innerHTML = data.results.map(result => `<tr><td>${result.first_name}${result.last_name}</td><td>${result.gender || 'Not specified'}</td><td>${result.cell_name}</td><td>${result.team_name}</td><td>${result.department_name}</td><td>${result.direction_name}</td><td>${result.region_name}</td><td>${result.attendance_count}</td><td>${result.total_services}</td><td>${result.attendance_percentage.toFixed(1)}%</td></tr>`).join(''); const newUrl = filterForm.action + '?' + queryParams; window.history.replaceState({ path: newUrl }, '', newUrl);
            } catch (error) { console.error('Error loading filtered data:', error); tableBody.innerHTML = `<tr><td colspan="10" class="text-center">An error occurred while loading data:${error.message}</td></tr>`; }
        }; const formInputs = [regionSelect, directionSelect, departmentSelect, teamSelect, cellSelect, statusSelect]; formInputs.forEach(input => { if (input) { input.addEventListener('change', ChurchOps.debounce(() => { loadFilteredData(); }, 300)); } }); if (nameSearch) { nameSearch.addEventListener('input', ChurchOps.debounce(() => { loadFilteredData(); }, 500)); }
    }, initReportCharts: () => { const reportCharts = document.querySelectorAll('.report-chart'); if (reportCharts.length === 0) return; if (typeof Chart === 'undefined') { const script = document.createElement('script'); script.src = 'https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js'; script.integrity = 'sha384-+jVt2eFCLJz+XTET+TzbRlJtUF7jgW0s0ll1Wo9xWl8xD7B5JZ+XrtJ4xF6RlTuA'; script.crossOrigin = 'anonymous'; script.onload = () => { reportCharts.forEach(chartContainer => { const chartData = JSON.parse(chartContainer.dataset.chart); const chartType = chartContainer.dataset.type || 'line'; const canvas = chartContainer.querySelector('canvas'); if (!canvas || !chartData) return; new Chart(canvas, { type: chartType, data: chartData, options: { responsive: true, maintainAspectRatio: false, animation: { duration: 400, easing: 'easeOutQuad' }, plugins: { legend: { position: 'top', labels: { usePointStyle: true, boxWidth: 6 } }, tooltip: { backgroundColor: 'rgba(0, 0, 0, 0.7)', titleFont: { size: 14 }, bodyFont: { size: 13 } } } } }); }); }; document.head.appendChild(script); } else { reportCharts.forEach(chartContainer => { }); } }, initResponsiveSliders: () => { const sliders = document.querySelectorAll('.slider, [data-slider]'); if (!sliders || sliders.length === 0) return; sliders.forEach(slider => { let startX, currentX, initialPosition; const handleTouchStart = (e) => { startX = e.touches[0].clientX; initialPosition = slider.scrollLeft; slider.style.scrollBehavior = 'auto'; }; const handleTouchMove = (e) => { if (!startX) return; currentX = e.touches[0].clientX; const diff = startX - currentX; slider.scrollLeft = initialPosition + diff; if (Math.abs(diff) > 5) { e.preventDefault(); } }; const handleTouchEnd = () => { startX = null; slider.style.scrollBehavior = 'smooth'; }; slider.addEventListener('touchstart', handleTouchStart, { passive: false }); slider.addEventListener('touchmove', handleTouchMove, { passive: false }); slider.addEventListener('touchend', handleTouchEnd); let isMouseDown = false; slider.addEventListener('mousedown', (e) => { isMouseDown = true; startX = e.clientX; initialPosition = slider.scrollLeft; slider.style.scrollBehavior = 'auto'; slider.style.cursor = 'grabbing'; e.preventDefault(); }); slider.addEventListener('mousemove', (e) => { if (!isMouseDown) return; const diff = startX - e.clientX; slider.scrollLeft = initialPosition + diff; }); slider.addEventListener('mouseup', () => { isMouseDown = false; slider.style.scrollBehavior = 'smooth'; slider.style.cursor = 'grab'; }); slider.addEventListener('mouseleave', () => { if (isMouseDown) { isMouseDown = false; slider.style.cursor = 'grab'; } }); const resizeSlider = () => { if (window.innerWidth < 768) { slider.style.overflowX = 'auto'; slider.style.scrollSnapType = 'x mandatory'; const items = slider.children; for (let item of items) { item.style.scrollSnapAlign = 'start'; item.style.flexShrink = '0'; } } else { slider.style.overflowX = 'auto'; } }; resizeSlider(); window.addEventListener('resize', ChurchOps.debounce(resizeSlider, 200)); }); }
}; document.addEventListener('DOMContentLoaded', () => { ChurchOps.initComponents(); document.querySelectorAll('.alert-close').forEach(button => { button.addEventListener('click', function () { const alert = this.closest('.alert'); alert.classList.add('fade-out'); setTimeout(() => alert.remove(), 300); }); }); });